import{_ as s,o as a,c as p,Q as e}from"./chunks/framework.46d06b6e.js";const _=JSON.parse('{"title":"API","description":"","frontmatter":{"head":[["meta",{"name":"og:site_name","content":"Vue webapp"}],["meta",{"name":"og:image","content":"/images/vue-webapp-logo.png"}],["meta",{"name":"twitter:image","content":"/images/vue-webapp-logo.png"}]]},"headers":[],"relativePath":"ru/vue-webapp/options/api.md","filePath":"ru/vue-webapp/options/api.md","lastUpdated":1700813582000}'),n={name:"ru/vue-webapp/options/api.md"},o=e(`<h1 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h1><p>Создает сервисный слой-обертку для REST обращений к бэкенду по HTTP(S). В качестве клиента может использоваться <code>fetch</code>, <code>axios</code> или промисная версия <code>XHR</code>, на выбор разработчика. С помощью неё вызовы API в коде выглядят следующим образом:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { api } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@/services/api&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">users</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">([]);</span></span>
<span class="line"><span style="color:#E1E4E8;">users.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> api.users.</span><span style="color:#B392F0;">list</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { api } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@/services/api&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">users</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">([]);</span></span>
<span class="line"><span style="color:#24292E;">users.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> api.users.</span><span style="color:#6F42C1;">list</span><span style="color:#24292E;">()</span></span></code></pre></div><p>Каждый вызов представляет из себя асинхронную функцию, возвращающую <code>Promise</code>.</p><p>Так же реализована система перехватчиков (interceptors).</p><p>Абстракция обращения к бэкенду позволяет в дальнейшем при желании легко переходить на другой транспорт (JSON-RPC, WebSockets, gRPC, GraphQL) - без изменения кода в части бизнес-логики приложения.</p>`,6),l=[o];function t(c,r,i,E,y,d){return a(),p("div",null,l)}const m=s(n,[["render",t]]);export{_ as __pageData,m as default};
