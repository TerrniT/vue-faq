import{_ as e,o as t,c as a,R as o}from"./chunks/framework.WpHw1xpL.js";const S=JSON.parse('{"title":"Технический стэк проекта","description":"","frontmatter":{"pageClass":"arty-crafty"},"headers":[],"relativePath":"ru/arty-crafty/analysis/tech-stack.md","filePath":"ru/arty-crafty/analysis/tech-stack.md","lastUpdated":1704271799000}'),c={name:"ru/arty-crafty/analysis/tech-stack.md"},r=o('<h1 id="техническии-стэк-проекта" tabindex="-1">Технический стэк проекта <a class="header-anchor" href="#техническии-стэк-проекта" aria-label="Permalink to &quot;Технический стэк проекта&quot;">​</a></h1><p>Фронтенд должен писаться на Vue 3, Vite. Из обязательных библиотек - <code>vue-router</code>. Действует правило: если можем обойтись без какой-то зависимости - обходимся без нее. Вместо Pinia используется Composition API напрямую.</p><p>Используем <code>TypeScript</code>, но в меру. Типизируем только основные сущности и интерфейсы. <code>TypeScript</code> должен облегчать работу разработчика, а не превращать её в кошмар.</p><p>CSS3 лучше любого CSS фреймворка/библиотеки, поэтому используем его (SCSS).</p><p><code>ESlint</code> конфигурация от <a href="https://github.com/antfu/eslint-config" target="_blank" rel="noreferrer">Antony Fu</a>.</p><p>Насчет использования библиотек UI компонент - в идеале постараемся иметь только свои компоненты, однако для быстрого прототипирования мы можем задействовать какую-то библиотеку, оборачивая ее компоненты в свои обертки для последующего безболезненного перехода на свой UI kit. То же относится к VueUse.</p><p>Для адаптивности мы устанавливаем на тэг <code>body</code> четыре глобальных класса - <code>mobile</code>, <code>tablet</code>, <code>notebook</code> и <code>desktop</code>, в зависимости от разрешения экрана, и используем их в стилях в компонентах. Это намного удобней прямой работы с CSS media query.</p>',7),s=[r];function d(n,i,p,_,l,h){return t(),a("div",null,s)}const f=e(c,[["render",d]]);export{S as __pageData,f as default};
